{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-29T01:17:32.468Z",
    "end": "2022-12-29T01:17:33.678Z",
    "duration": 1210,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9aa87602-dde6-485c-bd3e-69c5d97437b2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "67b0254b-b9d2-4b95-8ca0-8dabe9c6b078",
          "title": "Product tests",
          "fullFile": "C:\\Users\\lucas\\Desktop\\Proyectos\\coderhouse-backend\\src\\test\\productos.test.js",
          "file": "\\src\\test\\productos.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET /productos",
              "fullTitle": "Product tests GET /productos",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseChaiSuper = await request.get(\"/\").expect(200);\nexpect(responseChaiSuper.status).to.eql(200);",
              "err": {},
              "uuid": "d6d6949b-f3dd-4976-b3bc-6e7409686c9a",
              "parentUUID": "67b0254b-b9d2-4b95-8ca0-8dabe9c6b078",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /productos/:id",
              "fullTitle": "Product tests GET /productos/:id",
              "timedOut": false,
              "duration": 849,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let products = await productService.getAllProducts();\nlet productsIds = [];\nproducts.forEach(async product => {\n  productsIds.push(product.id);\n});\nlet randomProductId = productsIds[Math.floor(Math.random() * productsIds.length)];\nconst productsSuperChai = await request.get(`/${randomProductId}`).expect(200);\nexpect(productsSuperChai.status).to.eql(200);",
              "err": {},
              "uuid": "63fb9343-48d9-430b-ab4e-a0d7c186a7d9",
              "parentUUID": "67b0254b-b9d2-4b95-8ca0-8dabe9c6b078",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /productos",
              "fullTitle": "Product tests POST /productos",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseChaiSuper = await request.post(\"/\").send(\n  {\n    title: \"Created by test\",\n    price: 100,\n    description: \"Test\",\n    code: \"code\",\n    thumbnail: \"thumbnail\",\n    stock: 100,\n  },\n  {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer admin\",\n    },\n  }\n);\nexpect(responseChaiSuper.status).to.eql(200);",
              "err": {},
              "uuid": "f1e18e3b-fad0-453a-9df2-db7c6e31abb0",
              "parentUUID": "67b0254b-b9d2-4b95-8ca0-8dabe9c6b078",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /productos/:id",
              "fullTitle": "Product tests PUT /productos/:id",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let products = await productService.getAllProducts();\nlet productsIds = [];\nproducts.forEach(async product => {\n  productsIds.push(product.id);\n});\nlet randomProductId = productsIds[Math.floor(Math.random() * productsIds.length)];\nconst responseChaiSuper = await request.put(`/${randomProductId}`).send(\n  {\n    title: \"Changed by test\",\n    price: 100,\n    description: \"Test\",\n    code: \"code\",\n    thumbnail: \"thumbnail\",\n    stock: 100,\n  },\n  {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer admin\",\n    },\n  }\n);\nexpect(responseChaiSuper.status).to.eql(201);",
              "err": {},
              "uuid": "f377ed48-cc01-40c1-8d2f-7acdff14970b",
              "parentUUID": "67b0254b-b9d2-4b95-8ca0-8dabe9c6b078",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6d6949b-f3dd-4976-b3bc-6e7409686c9a",
            "63fb9343-48d9-430b-ab4e-a0d7c186a7d9",
            "f1e18e3b-fad0-453a-9df2-db7c6e31abb0",
            "f377ed48-cc01-40c1-8d2f-7acdff14970b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1006,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5f446c83-38df-4936-a92a-fa6f87ba8e1a",
          "title": "Product tests",
          "fullFile": "C:\\Users\\lucas\\Desktop\\Proyectos\\coderhouse-backend\\src\\test\\productosAxios.test.js",
          "file": "\\src\\test\\productosAxios.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET /productos",
              "fullTitle": "Product tests GET /productos",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(url);\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "aa4604fb-bb8d-47a0-9d0e-afb5660dd69e",
              "parentUUID": "5f446c83-38df-4936-a92a-fa6f87ba8e1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /productos/:id",
              "fullTitle": "Product tests GET /productos/:id",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let products = await productService.getAllProducts();\nlet productsIds = [];\nproducts.forEach(async product => {\n  productsIds.push(product.id);\n});\nlet randomProductId = productsIds[Math.floor(Math.random() * productsIds.length)];\nconst response = await axios.get(`${url}/${randomProductId}`);\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "e80f306d-c737-4b3f-9d36-f42948d05c83",
              "parentUUID": "5f446c83-38df-4936-a92a-fa6f87ba8e1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /productos",
              "fullTitle": "Product tests POST /productos",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.post(\n  url,\n  {\n    title: \"Test\",\n    price: 100,\n    description: \"Test\",\n    code: \"code\",\n    thumbnail: \"thumbnail\",\n    stock: 100,\n  },\n  {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer admin\",\n    },\n  }\n);\nassert.equal(response.status, 201);",
              "err": {},
              "uuid": "911c97a1-05f2-4b54-b233-8077ac465d52",
              "parentUUID": "5f446c83-38df-4936-a92a-fa6f87ba8e1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /productos/:id",
              "fullTitle": "Product tests PUT /productos/:id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.put(`${url}/1`, {\n  title: \"Test\",\n  price: 100,\n  description: \"Test\",\n  code: \"code\",\n  thumbnail: \"thumbnail\",\n  stock: 100,\n});\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "63cd047e-89de-491f-a775-a589da07f91f",
              "parentUUID": "5f446c83-38df-4936-a92a-fa6f87ba8e1a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa4604fb-bb8d-47a0-9d0e-afb5660dd69e",
            "e80f306d-c737-4b3f-9d36-f42948d05c83",
            "911c97a1-05f2-4b54-b233-8077ac465d52",
            "63cd047e-89de-491f-a775-a589da07f91f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 195,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}