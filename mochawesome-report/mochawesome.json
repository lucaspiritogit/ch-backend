{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 7,
    "pending": 0,
    "failures": 1,
    "start": "2022-12-31T03:11:12.519Z",
    "end": "2022-12-31T03:11:13.684Z",
    "duration": 1165,
    "testsRegistered": 8,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "315ad9d2-56a1-4187-beb3-fa45de736ad8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e129169b-2e56-4b46-a908-e3f612e111ff",
          "title": "Product tests",
          "fullFile": "C:\\Users\\lucas\\Desktop\\Proyectos\\coderhouse-backend\\src\\test\\productos.test.js",
          "file": "\\src\\test\\productos.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET /productos",
              "fullTitle": "Product tests GET /productos",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseChaiSuper = await request.get(\"/\").expect(200);\nexpect(responseChaiSuper.status).to.eql(200);",
              "err": {},
              "uuid": "f395bbc9-56a2-42b1-8c8d-ba3b61e06b9c",
              "parentUUID": "e129169b-2e56-4b46-a908-e3f612e111ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /productos/:id",
              "fullTitle": "Product tests GET /productos/:id",
              "timedOut": false,
              "duration": 800,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let products = await productService.getAllProducts();\nlet productsIds = [];\nproducts.forEach(async product => {\n  productsIds.push(product.id);\n});\nlet randomProductId = productsIds[Math.floor(Math.random() * productsIds.length)];\nconst productsSuperChai = await request.get(`/${randomProductId}`).expect(200);\nexpect(productsSuperChai.status).to.eql(200);",
              "err": {},
              "uuid": "8f59dd13-aae3-40e6-860b-1c0cf2fce3b6",
              "parentUUID": "e129169b-2e56-4b46-a908-e3f612e111ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /productos",
              "fullTitle": "Product tests POST /productos",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const responseChaiSuper = await request.post(\"/\").send(\n  {\n    title: \"Created by test\",\n    price: 100,\n    description: \"Test\",\n    code: \"code\",\n    thumbnail: \"thumbnail\",\n    stock: 100,\n  },\n  {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer admin\",\n    },\n  }\n);\nexpect(responseChaiSuper.status).to.eql(201);",
              "err": {
                "message": "AssertionError: expected 200 to deeply equal 201",
                "estack": "AssertionError: expected 200 to deeply equal 201\n    at Context.<anonymous> (src\\test\\productos.test.js:51:41)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 200\n+ 201\n"
              },
              "uuid": "1a4763d1-e234-4860-bdda-2e750e45fdef",
              "parentUUID": "e129169b-2e56-4b46-a908-e3f612e111ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /productos/:id",
              "fullTitle": "Product tests PUT /productos/:id",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let products = await productService.getAllProducts();\nlet productsIds = [];\nproducts.forEach(async product => {\n  productsIds.push(product.id);\n});\nlet randomProductId = productsIds[Math.floor(Math.random() * productsIds.length)];\nconst responseChaiSuper = await request.put(`/${randomProductId}`).send(\n  {\n    title: \"Changed by test\",\n    price: 100,\n    description: \"Test\",\n    code: \"code\",\n    thumbnail: \"thumbnail\",\n    stock: 100,\n  },\n  {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer admin\",\n    },\n  }\n);\nexpect(responseChaiSuper.status).to.eql(201);",
              "err": {},
              "uuid": "3485afcc-7377-466f-9fd4-4fd033b8cc40",
              "parentUUID": "e129169b-2e56-4b46-a908-e3f612e111ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f395bbc9-56a2-42b1-8c8d-ba3b61e06b9c",
            "8f59dd13-aae3-40e6-860b-1c0cf2fce3b6",
            "3485afcc-7377-466f-9fd4-4fd033b8cc40"
          ],
          "failures": [
            "1a4763d1-e234-4860-bdda-2e750e45fdef"
          ],
          "pending": [],
          "skipped": [],
          "duration": 957,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "66c3cc5d-ed3a-43e2-9bda-e6764fbcb7d2",
          "title": "Product tests",
          "fullFile": "C:\\Users\\lucas\\Desktop\\Proyectos\\coderhouse-backend\\src\\test\\productosAxios.test.js",
          "file": "\\src\\test\\productosAxios.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET /productos",
              "fullTitle": "Product tests GET /productos",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(url);\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "91650c1d-a559-400a-a185-1f7aeafa0c58",
              "parentUUID": "66c3cc5d-ed3a-43e2-9bda-e6764fbcb7d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /productos/:id",
              "fullTitle": "Product tests GET /productos/:id",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let products = await productService.getAllProducts();\nlet productsIds = [];\nproducts.forEach(async product => {\n  productsIds.push(product.id);\n});\nlet randomProductId = productsIds[Math.floor(Math.random() * productsIds.length)];\nconst response = await axios.get(`${url}/${randomProductId}`);\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "b35f89e1-b296-45f6-af58-060518f0a872",
              "parentUUID": "66c3cc5d-ed3a-43e2-9bda-e6764fbcb7d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /productos",
              "fullTitle": "Product tests POST /productos",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.post(\n  url,\n  {\n    title: \"Test\",\n    price: 100,\n    description: \"Test\",\n    code: \"code\",\n    thumbnail: \"thumbnail\",\n    stock: 100,\n  },\n  {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer admin\",\n    },\n  }\n);\nassert.equal(response.status, 201);",
              "err": {},
              "uuid": "1e39802f-0874-4338-a90a-b653ed81d574",
              "parentUUID": "66c3cc5d-ed3a-43e2-9bda-e6764fbcb7d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /productos/:id",
              "fullTitle": "Product tests PUT /productos/:id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.put(`${url}/1`, {\n  title: \"Test\",\n  price: 100,\n  description: \"Test\",\n  code: \"code\",\n  thumbnail: \"thumbnail\",\n  stock: 100,\n});\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "77793154-551b-46e1-b0de-c571b91c82b8",
              "parentUUID": "66c3cc5d-ed3a-43e2-9bda-e6764fbcb7d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91650c1d-a559-400a-a185-1f7aeafa0c58",
            "b35f89e1-b296-45f6-af58-060518f0a872",
            "1e39802f-0874-4338-a90a-b653ed81d574",
            "77793154-551b-46e1-b0de-c571b91c82b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 200,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}