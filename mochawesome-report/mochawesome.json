{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-31T03:23:43.832Z",
    "end": "2022-12-31T03:23:45.024Z",
    "duration": 1192,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0b5824d2-4ee2-404b-808a-cfcc174fb009",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "893dfcc5-8110-450a-8809-6089c5ae11b9",
          "title": "Product tests",
          "fullFile": "C:\\Users\\lucas\\Desktop\\Proyectos\\coderhouse-backend\\src\\test\\productos.test.js",
          "file": "\\src\\test\\productos.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET /productos",
              "fullTitle": "Product tests GET /productos",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseChaiSuper = await request.get(\"/\").expect(200);\nexpect(responseChaiSuper.status).to.eql(200);",
              "err": {},
              "uuid": "98e5ce26-516f-42b8-9180-202d80cfad26",
              "parentUUID": "893dfcc5-8110-450a-8809-6089c5ae11b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /productos/:id",
              "fullTitle": "Product tests GET /productos/:id",
              "timedOut": false,
              "duration": 813,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let products = await productService.getAllProducts();\nlet productsIds = [];\nproducts.forEach(async product => {\n  productsIds.push(product.id);\n});\nlet randomProductId = productsIds[Math.floor(Math.random() * productsIds.length)];\nconst productsSuperChai = await request.get(`/${randomProductId}`).expect(200);\nexpect(productsSuperChai.status).to.eql(200);",
              "err": {},
              "uuid": "ddc96708-20cd-4c54-8571-76db21ebeeb9",
              "parentUUID": "893dfcc5-8110-450a-8809-6089c5ae11b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /productos",
              "fullTitle": "Product tests POST /productos",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseChaiSuper = await request.post(\"/\").send(\n  {\n    title: \"Created by test\",\n    price: 100,\n    description: \"Test\",\n    code: \"code\",\n    thumbnail: \"thumbnail\",\n    stock: 100,\n  },\n  {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer admin\",\n    },\n  }\n);\nexpect(responseChaiSuper.status).to.eql(200);",
              "err": {},
              "uuid": "e0761d30-26d1-4307-b6bd-c8b25af60c8d",
              "parentUUID": "893dfcc5-8110-450a-8809-6089c5ae11b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /productos/:id",
              "fullTitle": "Product tests PUT /productos/:id",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let products = await productService.getAllProducts();\nlet productsIds = [];\nproducts.forEach(async product => {\n  productsIds.push(product.id);\n});\nlet randomProductId = productsIds[Math.floor(Math.random() * productsIds.length)];\nconst responseChaiSuper = await request.put(`/${randomProductId}`).send(\n  {\n    title: \"Changed by test\",\n    price: 100,\n    description: \"Test\",\n    code: \"code\",\n    thumbnail: \"thumbnail\",\n    stock: 100,\n  },\n  {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer admin\",\n    },\n  }\n);\nexpect(responseChaiSuper.status).to.eql(201);",
              "err": {},
              "uuid": "51c51f67-0e15-489f-875a-b02827b07d0e",
              "parentUUID": "893dfcc5-8110-450a-8809-6089c5ae11b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "98e5ce26-516f-42b8-9180-202d80cfad26",
            "ddc96708-20cd-4c54-8571-76db21ebeeb9",
            "e0761d30-26d1-4307-b6bd-c8b25af60c8d",
            "51c51f67-0e15-489f-875a-b02827b07d0e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 989,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d11f417f-81b6-4cd5-ba5c-257c6f1880ec",
          "title": "Product tests",
          "fullFile": "C:\\Users\\lucas\\Desktop\\Proyectos\\coderhouse-backend\\src\\test\\productosAxios.test.js",
          "file": "\\src\\test\\productosAxios.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET /productos",
              "fullTitle": "Product tests GET /productos",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(url);\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "c40fb05e-303b-4581-8149-d5f9058860b0",
              "parentUUID": "d11f417f-81b6-4cd5-ba5c-257c6f1880ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /productos/:id",
              "fullTitle": "Product tests GET /productos/:id",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let products = await productService.getAllProducts();\nlet productsIds = [];\nproducts.forEach(async product => {\n  productsIds.push(product.id);\n});\nlet randomProductId = productsIds[Math.floor(Math.random() * productsIds.length)];\nconst response = await axios.get(`${url}/${randomProductId}`);\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "99998d02-228d-432b-88fd-16887b6e86f7",
              "parentUUID": "d11f417f-81b6-4cd5-ba5c-257c6f1880ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /productos",
              "fullTitle": "Product tests POST /productos",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.post(\n  url,\n  {\n    title: \"Test\",\n    price: 100,\n    description: \"Test\",\n    code: \"code\",\n    thumbnail: \"thumbnail\",\n    stock: 100,\n  },\n  {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer admin\",\n    },\n  }\n);\nassert.equal(response.status, 201);",
              "err": {},
              "uuid": "94659cd8-cb1b-4212-8a96-15952e19da7d",
              "parentUUID": "d11f417f-81b6-4cd5-ba5c-257c6f1880ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /productos/:id",
              "fullTitle": "Product tests PUT /productos/:id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.put(`${url}/1`, {\n  title: \"Test\",\n  price: 100,\n  description: \"Test\",\n  code: \"code\",\n  thumbnail: \"thumbnail\",\n  stock: 100,\n});\nassert.equal(response.status, 200);",
              "err": {},
              "uuid": "5850cc0b-3d52-419f-952a-3bea67f59682",
              "parentUUID": "d11f417f-81b6-4cd5-ba5c-257c6f1880ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c40fb05e-303b-4581-8149-d5f9058860b0",
            "99998d02-228d-432b-88fd-16887b6e86f7",
            "94659cd8-cb1b-4212-8a96-15952e19da7d",
            "5850cc0b-3d52-419f-952a-3bea67f59682"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 195,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}